class Screen {
    static int _st_0 ;
    static int _st_1 ;
    static int _st_2 ;
    function void init (  ) {
        var int lcl_0 ;
        let _st_1 = 16384 ;
        let _st_2 = ~0 ;
        let _st_0 = Array.new(17) ;
        let _st_0[0] = 1 ;
        while (lcl_0 < 16) {
            let lcl_0 = lcl_0 + 1 ;
            let _st_0[lcl_0] = _st_0[lcl_0 - 1] + _st_0[lcl_0 - 1] ;
        }
        return  ;
    }
    function void clearScreen (  ) {
        var int lcl_0 ;
        while (lcl_0 < 8192) {
            let _st_1[lcl_0] = 0 ;
            let lcl_0 = lcl_0 + 1 ;
        }
        return  ;
    }
    function void updateLocation ( int arg_0, int arg_1 ) {
        if (_st_2) {
            let _st_1[arg_0] = _st_1[arg_0] | arg_1 ;
        }
        else {
            let _st_1[arg_0] = _st_1[arg_0] & (~arg_1) ;
        }
        return  ;
    }
    function void setColor ( int arg_0 ) {
        let _st_2 = arg_0 ;
        return  ;
    }
    function void drawPixel ( int arg_0, int arg_1 ) {
        var int lcl_0 ;
        var int lcl_1 ;
        var int lcl_2 ;
        if (arg_0 < 0 | (arg_0 > 511) | (arg_1 < 0) | (arg_1 > 255)) {
            do Sys.error(7) ;
        }
        let lcl_0 = Math.divide(arg_0, 16) ;
        let lcl_1 = arg_0 - Math.multiply(lcl_0, 16) ;
        let lcl_2 = Math.multiply(arg_1, 32) + lcl_0 ;
        do Screen.updateLocation(lcl_2, _st_0[lcl_1]) ;
        return  ;
    }
    function void drawConditional ( int arg_0, int arg_1, int arg_2 ) {
        if (arg_2) {
            do Screen.drawPixel(arg_1, arg_0) ;
        }
        else {
            do Screen.drawPixel(arg_0, arg_1) ;
        }
        return  ;
    }
    function void drawLine ( int arg_0, int arg_1, int arg_2, int arg_3 ) {
        var int lcl_0 ;
        var int lcl_1 ;
        var int lcl_2 ;
        var int lcl_3 ;
        var int lcl_4 ;
        var int lcl_5 ;
        var int lcl_6 ;
        var int lcl_7 ;
        var int lcl_8 ;
        var int lcl_9 ;
        var int lcl_10 ;
        if (arg_0 < 0 | (arg_2 > 511) | (arg_1 < 0) | (arg_3 > 255)) {
            do Sys.error(8) ;
        }
        let lcl_3 = Math.abs(arg_2 - arg_0) ;
        let lcl_2 = Math.abs(arg_3 - arg_1) ;
        let lcl_6 = lcl_3 < lcl_2 ;
        if (lcl_6 & (arg_3 < arg_1) | (~lcl_6 & (arg_2 < arg_0))) {
            let lcl_4 = arg_0 ;
            let arg_0 = arg_2 ;
            let arg_2 = lcl_4 ;
            let lcl_4 = arg_1 ;
            let arg_1 = arg_3 ;
            let arg_3 = lcl_4 ;
        }
        if (lcl_6) {
            let lcl_4 = lcl_3 ;
            let lcl_3 = lcl_2 ;
            let lcl_2 = lcl_4 ;
            let lcl_1 = arg_1 ;
            let lcl_0 = arg_0 ;
            let lcl_8 = arg_3 ;
            let lcl_7 = arg_0 > arg_2 ;
        }
        else {
            let lcl_1 = arg_0 ;
            let lcl_0 = arg_1 ;
            let lcl_8 = arg_2 ;
            let lcl_7 = arg_1 > arg_3 ;
        }
        let lcl_5 = Math.multiply(2, lcl_2) - lcl_3 ;
        let lcl_9 = Math.multiply(2, lcl_2) ;
        let lcl_10 = Math.multiply(2, lcl_2 - lcl_3) ;
        do Screen.drawConditional(lcl_1, lcl_0, lcl_6) ;
        while (lcl_1 < lcl_8) {
            if (lcl_5 < 0) {
                let lcl_5 = lcl_5 + lcl_9 ;
            }
            else {
                let lcl_5 = lcl_5 + lcl_10 ;
                if (lcl_7) {
                    let lcl_0 = lcl_0 - 1 ;
                }
                else {
                    let lcl_0 = lcl_0 + 1 ;
                }
            }
            let lcl_1 = lcl_1 + 1 ;
            do Screen.drawConditional(lcl_1, lcl_0, lcl_6) ;
        }
        return  ;
    }
    function void drawRectangle ( int arg_0, int arg_1, int arg_2, int arg_3 ) {
        var int lcl_0 ;
        var int lcl_1 ;
        var int lcl_2 ;
        var int lcl_3 ;
        var int lcl_4 ;
        var int lcl_5 ;
        var int lcl_6 ;
        var int lcl_7 ;
        var int lcl_8 ;
        if (arg_0 > arg_2 | (arg_1 > arg_3) | (arg_0 < 0) | (arg_2 > 511) | (arg_1 < 0) | (arg_3 > 255)) {
            do Sys.error(9) ;
        }
        let lcl_3 = Math.divide(arg_0, 16) ;
        let lcl_7 = arg_0 - Math.multiply(lcl_3, 16) ;
        let lcl_4 = Math.divide(arg_2, 16) ;
        let lcl_8 = arg_2 - Math.multiply(lcl_4, 16) ;
        let lcl_6 = ~(_st_0[lcl_7] - 1) ;
        let lcl_5 = _st_0[lcl_8 + 1] - 1 ;
        let lcl_0 = Math.multiply(arg_1, 32) + lcl_3 ;
        let lcl_2 = lcl_4 - lcl_3 ;
        while (~(arg_1 > arg_3)) {
            let lcl_1 = lcl_0 + lcl_2 ;
            if (lcl_2 = 0) {
                do Screen.updateLocation(lcl_0, lcl_5 & lcl_6) ;
            }
            else {
                do Screen.updateLocation(lcl_0, lcl_6) ;
                let lcl_0 = lcl_0 + 1 ;
                while (lcl_0 < lcl_1) {
                    do Screen.updateLocation(lcl_0, -1) ;
                    let lcl_0 = lcl_0 + 1 ;
                }
                do Screen.updateLocation(lcl_1, lcl_5) ;
            }
            let arg_1 = arg_1 + 1 ;
            let lcl_0 = lcl_1 + 32 - lcl_2 ;
        }
        return  ;
    }
    function void drawHorizontal ( int arg_0, int arg_1, int arg_2 ) {
        var int lcl_0 ;
        var int lcl_1 ;
        var int lcl_2 ;
        var int lcl_3 ;
        var int lcl_4 ;
        var int lcl_5 ;
        var int lcl_6 ;
        var int lcl_7 ;
        var int lcl_8 ;
        var int lcl_9 ;
        var int lcl_10 ;
        let lcl_7 = Math.min(arg_1, arg_2) ;
        let lcl_8 = Math.max(arg_1, arg_2) ;
        if (arg_0 > (-1) & (arg_0 < 256) & (lcl_7 < 512) & (lcl_8 > (-1))) {
            let lcl_7 = Math.max(lcl_7, 0) ;
            let lcl_8 = Math.min(lcl_8, 511) ;
            let lcl_1 = Math.divide(lcl_7, 16) ;
            let lcl_9 = lcl_7 - Math.multiply(lcl_1, 16) ;
            let lcl_2 = Math.divide(lcl_8, 16) ;
            let lcl_10 = lcl_8 - Math.multiply(lcl_2, 16) ;
            let lcl_5 = ~(_st_0[lcl_9] - 1) ;
            let lcl_4 = _st_0[lcl_10 + 1] - 1 ;
            let lcl_0 = Math.multiply(arg_0, 32) + lcl_1 ;
            let lcl_6 = lcl_2 - lcl_1 ;
            let lcl_3 = lcl_0 + lcl_6 ;
            if (lcl_6 = 0) {
                do Screen.updateLocation(lcl_0, lcl_4 & lcl_5) ;
            }
            else {
                do Screen.updateLocation(lcl_0, lcl_5) ;
                let lcl_0 = lcl_0 + 1 ;
                while (lcl_0 < lcl_3) {
                    do Screen.updateLocation(lcl_0, -1) ;
                    let lcl_0 = lcl_0 + 1 ;
                }
                do Screen.updateLocation(lcl_3, lcl_4) ;
            }
        }
        return  ;
    }
    function void drawSymetric ( int arg_0, int arg_1, int arg_2, int arg_3 ) {
        do Screen.drawHorizontal(arg_1 - arg_3, arg_0 + arg_2, arg_0 - arg_2) ;
        do Screen.drawHorizontal(arg_1 + arg_3, arg_0 + arg_2, arg_0 - arg_2) ;
        do Screen.drawHorizontal(arg_1 - arg_2, arg_0 - arg_3, arg_0 + arg_3) ;
        do Screen.drawHorizontal(arg_1 + arg_2, arg_0 - arg_3, arg_0 + arg_3) ;
        return  ;
    }
    function void drawCircle ( int arg_0, int arg_1, int arg_2 ) {
        var int lcl_0 ;
        var int lcl_1 ;
        var int lcl_2 ;
        if (arg_0 < 0 | (arg_0 > 511) | (arg_1 < 0) | (arg_1 > 255)) {
            do Sys.error(12) ;
        }
        if (arg_0 - arg_2 < 0 | (arg_0 + arg_2 > 511) | (arg_1 - arg_2 < 0) | (arg_1 + arg_2 > 255)) {
            do Sys.error(13) ;
        }
        let lcl_1 = arg_2 ;
        let lcl_2 = 1 - arg_2 ;
        do Screen.drawSymetric(arg_0, arg_1, lcl_0, lcl_1) ;
        while (lcl_1 > lcl_0) {
            if (lcl_2 < 0) {
                let lcl_2 = lcl_2 + Math.multiply(2, lcl_0) + 3 ;
            }
            else {
                let lcl_2 = lcl_2 + Math.multiply(2, lcl_0 - lcl_1) + 5 ;
                let lcl_1 = lcl_1 - 1 ;
            }
            let lcl_0 = lcl_0 + 1 ;
            do Screen.drawSymetric(arg_0, arg_1, lcl_0, lcl_1) ;
        }
        return  ;
    }
}
